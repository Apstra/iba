{# Probe to monitor leaf-spine link-based BGP peering sessions within the fabric across all VRFs on all leafs #}

{# TODO: Enhance to support svi based BGP peering between members of MLAG domains #}
{% set default_sz_query =
  "match("
    "node('system', name='leaf', role='leaf', system_id=not_none(), deploy_mode='deploy').out('hosted_interfaces')"
    ".node('interface', name='intf', if_type='ip').out('link')"
    ".node('link').in_('link')"
    ".node('interface', name='other_intf').in_('hosted_interfaces')"
    ".node('system', name='peer', deploy_mode='deploy').ensure_different('leaf', 'peer'),"
    "optional("
      "node(name='intf').in_('member_interfaces')"
      ".node('sz_instance').in_('instantiated_by')"
      ".node('security_zone', name='sz'))"
    ")"
%}

{% set non_default_sz_query =
  "match("
    "node('system', name='leaf', role='leaf', system_id=not_none(), deploy_mode='deploy').out('hosted_interfaces')"
    ".node('interface').out('composed_of').node('interface', name='intf', if_type='subinterface').out('link')"
    ".node('link').in_('link')"
    ".node('interface', name='other_intf').in_('composed_of').node('interface').in_('hosted_interfaces')"
    ".node('system', name='peer', deploy_mode='deploy').ensure_different('leaf', 'peer'),"
    "node(name='intf').in_('member_interfaces').node('sz_instance').in_('instantiated_by').node('security_zone', name='sz'))"
%}

{
  "processors": [
    {
      "name": "Collect BGP session state",
      "type": "generic_data_collector",
      "properties": {
        "data_type": "dss",
        "graph_query": ["{{default_sz_query}}", "{{non_default_sz_query}}"],
        "service_name": "bgp_iba",
        "system_id": "leaf.system_id",
        "key": "'%s_%s' % (sz.vrf_name if sz else 'default', other_intf.ipv4_addr.split('/')[0] if other_intf.ipv4_addr else intf.if_name)",
        "interface": "intf.if_name",
        "peer_hostname": "peer.hostname",
        "value_map": {
          "0": "missing",
          "1": "up",
          "2": "down"
        }
      },
      "outputs": {
        "out": "bgp_session_state"
      }
    },
    {
      "type": "{{ function.get_proc_name('in_state', aos_version) }}",
      "name": "Inactive BGP sessions",
      "inputs": {
        "in": "bgp_session_state"
      },
      "properties": {
        "state": "{{ function.state_check_format_state('up', aos_version) }}",
        "raise_anomaly": true
      },
      "outputs": {
        "out": "bgp_session_down"
      }
    }
  ],
  "label": "Leaf vrf-aware BGP session anomalies"
}
