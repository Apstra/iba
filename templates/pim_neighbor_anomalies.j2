{#
  This probe ensures every leaf-spine and leaf-leaf link in every VRF has a PIM neighbor.
  Also ensure all SVI interfaces have a PIM neighbor.
#}

{% set physical_interfaces_query =
  "match("
    "node('system', name='system', role=is_in(['leaf', 'spine']), deploy_mode='deploy').out('hosted_interfaces')"
    ".node('interface', name='intf', if_type='ip').out('link')"
    ".node('link', role=is_in(['spine_leaf', 'leaf_peer_link'])),"
    "optional("
      "node(name='intf').in_('member_interfaces')"
      ".node('sz_instance').in_('instantiated_by')"
      ".node('security_zone', name='sz'))"
  ")"
%}

{% set sub_interface_query =
  "match("
    "node('system', name='system', role=is_in(['leaf', 'spine']), deploy_mode='deploy').out('hosted_interfaces')"
    ".node('interface').out('composed_of')"
    ".node('interface', name='intf', if_type='subinterface').out('link')"
    ".node('link', role=is_in(['spine_leaf', 'leaf_peer_link'])),"
    "node(name='intf').in_('member_interfaces')"
    ".node('sz_instance').in_('instantiated_by')"
    ".node('security_zone', name='sz'))"
%}

{% set dual_leaf_svi_interface_query =
  "match("
    "node('interface', name='intf', if_type='svi').in_('member_interfaces')"
    ".node('sz_instance').in_('instantiated_by')"
    ".node('security_zone', name='sz'),"
    "node(name='intf').in_('member_interfaces')"
    ".node('vn_instance').in_('hosted_vn_instances')"
    ".node('system', name='system'))"
    ".having(node(name='system').in_('composed_of_systems')"
    ".node('redundancy_group'), at_least=1)"
%}

{% set single_leaf_svi_interface_query =
  "match("
    "node('interface', name='intf', if_type='svi').in_('member_interfaces')"
    ".node('sz_instance').in_('instantiated_by')"
    ".node('security_zone', name='sz'),"
    "node(name='intf').in_('member_interfaces')"
    ".node('vn_instance').in_('hosted_vn_instances')"
    ".node(name='system'))"
    ".having(node('system', name='system').in_('composed_of_systems')"
    ".node('redundancy_group'), at_most=0)"
%}

{
  "processors": [
    {
      "name": "pim neighbors",
      "type": "generic_data_collector",
      "properties": {
        "data_type": "ns",
        "graph_query": [
          "{{physical_interfaces_query}}",
          "{{sub_interface_query}}",
          "{{dual_leaf_svi_interface_query}}"
        ],
        "service_name": "pim_neighbor_count",
        "system_id": "system.system_id",
        "key": "'%s|%s' % (sz.vrf_name if sz else 'default', intf.if_name)",
        "description": "intf.description"
      },
      "outputs": {
        "out": "pim_neighbor_count"
      }
    },
    {
      "name": "single leaf svi pim neighbors",
      "type": "generic_data_collector",
      "properties": {
        "data_type": "ns",
        "graph_query": [
          "{{single_leaf_svi_interface_query}}"
        ],
        "service_name": "pim_neighbor_count",
        "system_id": "system.system_id",
        "key": "'%s|%s' % (sz.vrf_name if sz else 'default', intf.if_name)",
        "description": "intf.description"
      },
      "outputs": {
        "out": "single_leaf_pim_neighbor_count"
      }
    },
    {
      "name": "pim_neighbor_count_anomaly",
      "type": "{{ function.get_proc_name('in_range', aos_version) }}",
      "inputs": {
        "in": "pim_neighbor_count"
      },
      "properties": {
        "range": {
          "min": 1,
          "max": 1
        },
        "raise_anomaly": true
      },
      "outputs": {
        "out": "pim_neighbor_count_anomaly"
      }
    },
    {
      "name": "single_leaf_pim_neighbor_count_anomaly",
      "type": "{{ function.get_proc_name('in_range', aos_version) }}",
      "inputs": {
        "in": "single_leaf_pim_neighbor_count"
      },
      "properties": {
        "range": {
          "min": 0,
          "max": 0
        },
        "raise_anomaly": true
      },
      "outputs": {
        "out": "single_leaf_pim_neighbor_count_anomaly"
      }
    },
    {
      "name": "pim_neighbor_anomaly History",
      "type": "accumulate",
      "inputs": {
        "in": "pim_neighbor_count_anomaly"
      },
      "outputs": {
        "out": "pim_neighbor_anomaly_history"
      },
      "properties": {
        "max_samples": 50
      }
    },
    {
      "name": "single_leaf_pim_neighbor_anomaly History",
      "type": "accumulate",
      "inputs": {
        "in": "single_leaf_pim_neighbor_count_anomaly"
      },
      "outputs": {
        "out": "single_leaf_pim_neighbor_anomaly_history"
      },
      "properties": {
        "max_samples": 50
      }
    }
  ],
  "label": "PIM Neighbor Anomalies"
}
