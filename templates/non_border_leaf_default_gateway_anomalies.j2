{# note: we assume that all border leafs in all vrfs have uniform peering with
   external routers. In the context of this probe, this means they have equal number
   of connections to the router
#}
{% set supports_raise_anomaly = function.supports_raise_anomaly(aos_version) %}
{
  "processors": [
    {
      "name": "Collect default gateway count on non-border leafs",
      "type": "generic_data_collector",
      "properties": {
        "data_type": "ns",
        "graph_query": "match(node('system', name='leaf', role='leaf', deploy_mode='deploy').out('hosted_sz_instances').node('sz_instance').in_('instantiated_by').node('security_zone', name='sz').having(node(name='leaf').out('hosted_interfaces').node('interface').out('link').node('link', role='to_external_router'), at_most=0))",
        "service_name": "route_count",
        "system_id": "leaf.system_id",
        "key": "'%s_0.0.0.0/0' % sz.vrf_name"
      },
      "outputs": {
        "out": "non_border_leaf_default_gw_count"
      }
    },
    {
      "name": "Check if default gateway count is as expected",
      "type": "{{ function.get_proc_name('in_range', aos_version) }}",
      "inputs": {
        "in": "non_border_leaf_default_gw_count"
      },
      "properties": {
        {# To determine link count between a given leaf and given spine, we find all
           links between the first leaf and first spine in default vrf #}
        {% set spine_leaf_link_count = function.query.iterate(blueprint, function.query.match(function.query.node('system', id=blueprint.get_nodes('system', role='leaf').first.id).out('hosted_interfaces').node('interface', name='leaf_intf').out('link').node('link', role='spine_leaf').in_('link').node('interface').in_('hosted_interfaces').node('system', id=blueprint.get_nodes('system', role='spine').first.id), function.query.node(name='leaf_intf').in_('member_interfaces').node('sz_instance').in_('instantiated_by').node('security_zone', vrf_name='default'))) | list | length %}
        {% set num_spines_connected_to_router = function.query.iterate(blueprint, function.query.match(function.query.node('system', name='spine', role='spine', deploy_mode='deploy').out('hosted_interfaces').node('interface').out('link').node('link', role='to_external_router').in_('link').node('interface').in_('hosted_interfaces').node('system', role='external_router')).distinct(['spine'])) | list | length %}
        {% set default_gw_count = None %}
        {% if num_spines_connected_to_router > 0 %}
          {% set default_gw_count = num_spines_connected_to_router * spine_leaf_link_count %}
        {% else %}
          {% set default_gw_count = (blueprint.get_nodes('system', role='spine', deploy_mode='deploy') | list | length) * spine_leaf_link_count %}
        {% endif %}
        "range": {
          "min": {{default_gw_count}},
          "max": {{default_gw_count}}
        }
{% if supports_raise_anomaly %}
        , "raise_anomaly": true
{% endif %}
      },
      "outputs": {
        "out": "mismatched_non_border_leafs"
      }
    }
{% if not supports_raise_anomaly %}
    ,
    {
      "name": "Mismatched non-border leaf anomaly",
      "type": "anomaly",
      "inputs": {
        "in": "mismatched_non_border_leafs"
      },
      "properties": {
        "enable_streaming": true
      },
      "outputs": {
        "out": "mismatched_non_border_leafs_anomaly"
      }
    }
{% endif %}
  ],
  "label": "Non-border leaf default gateway count anomalies"
}
