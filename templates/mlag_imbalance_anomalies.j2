{# Detect imbalance between all members of any MLAG and raise anomalies if standard deviation is
   more than max_std_dev_in_bytes_per_sec #}
{% set query_2_1_1 =
  "match(node('interface', name='mlag_intf', mlag_id=not_none()).out('composed_of')"
  ".node('interface').out('composed_of')"
  ".node('interface', name='intf').in_('hosted_interfaces')"
  ".node('system', name='system', system_id=not_none(), deploy_mode='deploy'),"
  "node('redundancy_group', name='rg').out('hosted_interfaces').node(name='mlag_intf'),"
  "node(name='intf').out('link').node('link', name='link').in_('link').node('interface', name='peer_intf')"
  ".in_('hosted_interfaces').node('system', name='peer_system')"
  ".ensure_different('intf', 'peer_intf'))"
%}
{% set query_2_2 =
  "match(node('interface', name='mlag_intf', mlag_id=not_none()).out('composed_of')"
  ".node('interface').out('composed_of')"
  ".node('interface', name='intf').in_('hosted_interfaces')"
  ".node('system', name='system', system_id=not_none(), deploy_mode='deploy'),"
  "node('redundancy_group', name='rg').out('hosted_interfaces').node(name='mlag_intf'),"
  "node(name='intf').out('link').node('link', name='link').in_('link').node('interface', name='peer_intf')"
  ".in_('hosted_interfaces').node('system', name='peer_system')"
  ".ensure_different('intf', 'peer_intf'),"
  "optional(node(name='peer_system').out('part_of_redundancy_group').node('redundancy_group', name='peer_rg')))"
%}
{% set supports_raise_anomaly = function.supports_raise_anomaly(aos_version) %}
{% set bps_suffix = function.bps_counter_suffix(aos_version) %}
{% set new_style_stage_def = function.new_style_stage_def(aos_version) %}
{% set sustained = function.is_true(sustained) %}

{
  "label": "{{'Sustained ' if sustained else ''}}MLAG imbalance anomalies",
  "processors": [
    {
      "name": "MLAG member interface traffic",
      "type": "if_counter",
      "properties": {
        "graph_query": "{{ query_2_1_1 if function.version_compare(aos_version, '<', '2.2') else query_2_2 }}",
        "system_id": "system.system_id",
{% if bps_suffix %}
        "counter_type": "rx_{{ bps_suffix }}",
{% else %}
        "counter_type": "rx_bytes",
{% endif %}
        "description": "intf.description or 'facing %s' % (peer_system.hostname or peer_system.label or peer_system.role)",
        "interface": "intf.if_name",
        "mlag_id": "mlag_intf.mlag_id",
{% if function.version_compare(aos_version, '>=', '2.2') %}
        "mlag_desc": "'facing %s' % (peer_rg.label if peer_rg else 'server')",
{% endif %}
        "rack": "rg.label",
        "role": "link.role"
      },
      "outputs": {
        "out": "intf_ingress_traffic"
      },
      "stages": [
        {
          "name": "{{ "intf_ingress_traffic" if new_style_stage_def else "out" }}",
          "units": "{{ "bps" if bps_suffix else "Bps" }}"
        }
      ]
    },
    {
      "name": "Imbalance between members",
      "type": "std_dev",
      "properties": {
{% if function.version_compare(aos_version, '<', '2.2') %}
        "group_by": ["mlag_id", "rack"]
{% else %}
        "group_by": ["mlag_id", "rack", "mlag_desc"]
{% endif %}
      },
      "inputs": {
        "in": "intf_ingress_traffic"
      },
      "outputs": {
        "out": "mlag_std_dev"
      },
      "stages": [
        {
          "name": "{{ "mlag_std_dev" if new_style_stage_def else "out" }}",
          "units": "{{ "bps" if bps_suffix else "Bps" }}"
        }
      ]
    },
    {
      "name": "Imbalance exceeds threshold?",
      "type": "{{ function.get_proc_name('in_range', aos_version) }}",
      "inputs": {
        "in": "mlag_std_dev"
      },
      "properties": {
        "range": {
{% if bps_suffix %}
          "max": {{ max_std_dev_in_bits_per_sec }}
{% else %}
          "max": {{ (max_std_dev_in_bits_per_sec | int) / 8 }}
{% endif %}
        }
{% if supports_raise_anomaly and not sustained %}
        , "raise_anomaly": true
{% endif %}
      },
      "outputs": {
        "out": "mlag_std_dev_exceeds_threshold"
      }
    },
{% if sustained %}
    {
      "name": "Sustained imbalance exceeds threshold",
      "type": "{{ function.get_proc_name('time_in_state', aos_version) }}",
      "inputs": {
        "in": "mlag_std_dev_exceeds_threshold"
      },
      "properties": {
        "time_window": 120,
        "state_range": {
          "true": [
            {
              "max": 20
            }
          ]
        }
{% if supports_raise_anomaly %}
        , "raise_anomaly": true
{% endif %}
      },
      "outputs": {
        "out": "sustained_mlag_std_dev_exceeds_threshold"
      }
    }
{% endif %}
{% if not supports_raise_anomaly %}
    ,
    {
      "type": "anomaly",
      "name": "MLAG imbalance anomaly",
      "inputs": {
        "in": "{{'sustained_' if sustained else ''}}mlag_std_dev_exceeds_threshold"
      },
      "properties": {
        "enable_streaming": true
      },
      "outputs": {
        "out": "{{'sustained_' if sustained else ''}}mlag_imbalance_anomaly"
      }
    }
{% endif %}
  ]
}
