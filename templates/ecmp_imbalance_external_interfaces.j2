{% set supports_raise_anomaly = function.supports_raise_anomaly(aos_version) %}
{% set bps_suffix = function.bps_counter_suffix(aos_version) %}
{% set new_style_stage_def = function.new_style_stage_def(aos_version) %}

{% set systems_connected_to_router = ([
  "node('system', name='system', deploy_mode='deploy', role=is_in(['leaf','spine']),"
        "system_id=not_none()).out('hosted_interfaces')",
  ".node('interface', name='interface', if_type=is_in(['ip', 'ethernet']), ",
         "if_name=not_none()).out('link')",
  ".node('link', link_type='ethernet').in_('link')",
  ".node('interface', if_type=is_in(['ip', 'ethernet'])).in_('hosted_interfaces')",
  ".node('system', name='router', role='external_router')"
] | join ) %}

{
  "label": "ECMP Imbalance (External Interfaces)",
  "processors":[
    {
      "type": "if_counter",
      "name": "external interface traffic",
      "outputs":{
        "out": "external_int_traffic"
      },
      "properties":{
        "graph_query": "{{systems_connected_to_router}}",
        "interface":"interface.if_name",
        "interface_desc": "interface.description or 'facing %s' % (router.hostname or router.label)",
        "system_id":"system.system_id",
{% if bps_suffix %}
        "counter_type": "tx_{{bps_suffix}}",
{% else %} 
        "counter_type": "tx_bytes",
{% endif %}
        "router":"router.label"
      },
      "stages": [
        {
          "name": "{{ "external_int_traffic" if new_style_stage_def else "out" }}",
          "units": "{{ "bps" if bps_suffix else "Bps" }}"
        }
      ]
    },
    {
      "inputs":{
        "in": "external_int_traffic"
      },
      "type":"std_dev",
      "name":"std-dev by {{'router' if group_by_router else 'border switch'}}",
      "outputs":{
        "out":"ext_int_std_dev"
      },
      "properties":{
        "group_by":[
          "{{'router' if group_by_router else 'system_id'}}"
        ],
        "ddof":0
      }
    },
    {
      "inputs":{
        "in":"ext_int_std_dev"
      },
      "type":"{{ function.get_proc_name('in_range', aos_version) }}",
      "name":"ECMP Imbalance",
      "outputs":{
        "out":"live_ecmp_imbalance"
      },
      "properties":{
{% if supports_raise_anomaly %}
        "raise_anomaly": true,
{% endif %}
        "property":"value",
        "range":{
          "max":{{ max_std_dev }}
        }
      }
    },
{% if not supports_raise_anomaly %}
    {
      "type": "anomaly",
      "name": "ECMP imbalance anomaly",
      "inputs": {
        "in": "live_ecmp_imbalance"
      },
      "outputs": {
        "out": "ecmp_imbalance_anomaly"
      }
    },
{% endif %}
    {
      "inputs":{
        "in": "{{ 'live_ecmp_imbalance' if supports_raise_anomaly else 'ecmp_imbalance_anomaly' }}"
      },
      "type":"accumulate",
      "name":"ECMP imbalance anomaly history",
      "outputs":{
        "out":"ecmp_imbalance_anomaly_history"
      },
      "properties":{
        "max_samples":50
      }
    }
  ]
}
