{% set supports_raise_anomaly = function.supports_raise_anomaly(aos_version) %}

{% set graph_query =
  "match("
    "node('system', role='leaf', deploy_mode='deploy', name='leaf')"
    ".out('hosted_interfaces')"
    ".node('interface', name='interface')"
    ".out('link')"
    ".node('link', role='leaf_l2_server')"
    ".in_('link')"
    ".node('interface')"
    ".out('hosted_vn_endpoints')"
    ".node('vn_endpoint')"
    ".out('member_of')"
    ".node('virtual_network', name='vn')"
    ".out('instantiated_by')"
    ".node('vn_instance', name='vn_instance')"
    ".in_('hosted_vn_instances')"
    ".node(name='leaf')"
  ").distinct(['leaf','interface','vn'])"
%}

{
  "processors": [
    {
      "name": "STP interface state",
      "type": "generic_data_collector",
      "properties": {
        "data_type": "ns",
        {# Not using dss as we cannot raise anomaly for a given state. See RFE-546. #}
        "graph_query": "{{ graph_query }}",
        "service_name": "stp",
        "system_id": "leaf.system_id",
        "key": "'%s|%s|stp_state' % (interface.if_name, vn_instance.vlan_id)",
        "description": "interface.description",
        "vlan": "vn_instance.vlan_id",
        "value_map": {
          "0": "missing",
          "1": "forwarding",
          "2": "blocking",
          "3": "listening",
          "4": "learning"
        }
      },
      "outputs": {
        "out": "stp_state"
      }
    },
    {
      "name": "Interfaces missing STP state",
      "type": "{{ function.get_proc_name('in_range', aos_version) }}",
      "inputs": {
        "in": "stp_state"
      },
      "properties": {
        "range": {
          "min": 0,
          "max": 0
        }
      },
      "outputs": { 
        "out": "stp_state_missing" 
      }
    },
    {
      "name": "Interfaces not in forwarding state",
      "type": "{{ function.get_proc_name('in_range', aos_version) }}",
      "inputs": {
        "in": "stp_state"
      },
      "properties": {
        "range": {
          "min": 0,
          "max": 1
        },
        {% if function.version_compare(aos_version, '>=', '3.1') %}
          "raise_anomaly": false
        {% else %}
          "raise_anomaly": true
        {% endif %}
      },
      "outputs": {
        "out": "stp_state_not_forwarding"
      }
    },
    {% if function.version_compare(aos_version, '>=', '3.1') %}
    {
      "inputs": {"in": "stp_state_not_forwarding"},
      "type": "state_check",
      "name": "check_stp_state_not_forwarding",
      "outputs": {"out": "stp_state_anomaly"},
      "properties": {
        "enable_streaming": false,
        "state": "'false'",
        "raise_anomaly": true
      }
    },
    {% endif %}
    {
      "name": "Anomaly history of STP interface state",
      "type": "accumulate",
      "inputs": {
        {% if function.version_compare(aos_version, '>=', '3.1') %}
          "in": "stp_state_anomaly"
        {% else %}
          "in": "stp_state_not_forwarding"
        {% endif %}
      },
      "properties": {
        "max_samples": 50
      },
      "outputs": {
        "out": "stp_state_anomaly_history"
      }
    }
  ],
  "label": "STP state anomalies for non-forwarding ports"
}
